generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// Enums
//
enum Role {
  USER
  ADMIN
}

//
// User & Authentication
//
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  role          Role      @default(USER)
  emailVerified Boolean
  image         String?
  isOnline      Boolean   @default(false) // presence tracking
  lastActive    DateTime? @default(now()) // presence tracking
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  sessions Session[]
  accounts Account[]
  Server   Server[]
  // Member Member[]
  // Channel Channel[]
  Member   Member[]
  Channel  Channel[]

  @@index([isOnline])
  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("account")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

//
model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members  Member[]
  channels Channel[]

  @@index([userId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  // messages Message[]
  // directMessages DirectMessage[]

  // conversationsInitiated Conversation[] @relation("MemberOne")
  // conversationsReceived  Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(cuid())
  name String
  type ChannelType @default(TEXT)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  // messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([serverId])
}

// model Message {
//   id      String  @id @default(uuid())
//   content String  @db.Text
//   fileUrl String? @db.Text

//   memberId String
//   member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

//   channelId String
//   channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

//   deleted Boolean @default(false)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([channelId])
//   @@index([memberId])
// }

// model Conversation {
//   id String @id @default(uuid())

//   memberOneId String
//   memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

//   memberTwoId String
//   memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

//  directMessage DirectMessage[]

//   @@unique([memberOneId, memberTwoId])
//   // @@index([memberOneId])
//   @@index([memberTwoId])
// }

// model DirectMessage {
//   id      String  @id @default(uuid())
//   content String  @db.Text
//   fileUrl String? @db.Text

//   memberId String

//   conversationId String
//   conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
//   member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)

//   deleted Boolean @default(false)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@index([memberId])
//   @@index([conversationId])
// }
